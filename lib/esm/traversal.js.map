{
  "version": 3,
  "sources": ["../../src/traversal.ts"],
  "sourcesContent": ["/**\n * Traverses the input rootNode in a Depth-First order, keeping track on node entry and exit times.\n * @param rootNode - The node to start traversing from.\n * @param getChildren - A callback which returns an iterable of child nodes given an input node.\n * @param onEntry - A callback which is called when a node is pulled out of the stack BEFORE its children are collected.\n * @param onExit - A  callback which is called AFTER a node's children have been traversed.\n * @typeParam T - The type of the nodes in the graph.\n * */\nexport function traverseDFS<T>(\n    rootNode: T,\n    getChildren: (node: T) => Iterable<T>,\n    onEntry?: (node: T, time: number) => void,\n    onExit?: (node: T, time: number) => void,\n): void {\n    const visited = new Set<T>();\n    let time = 0;\n\n    const stack= [rootNode];\n\n    while (stack.length > 0) {\n        // Peek at the top of the stack so that we can hook into a node's entry time\n        const node = stack[stack.length - 1]!;\n\n        if (!visited.has(node)) {\n            visited.add(node);\n            time++;\n            onEntry?.(node, time);\n\n            // Get children of the node\n            const children = getChildren(node);\n\n            // Push unvisited children onto the stack\n            for (let child of children) {\n                if (!visited.has(child)) {\n                    stack.push(child);\n                }\n            }\n        } else {\n            // Finally remove the node from the stack\n            stack.pop();\n            time++;\n            onExit?.(node, time);\n        }\n    }\n}\n\n/** A helper interface that can be used to wrap a graph node that is being traversed,\n * adding a state of any type and memorized children array. */\nexport interface NodeState<N, S> {\n    node: N;\n    state: S;\n    children?: Array<NodeState<N, S>>;\n}\n"],
  "mappings": "AAQO,SAAS,YACZ,UACA,aACA,SACA,QACI;AACJ,QAAM,UAAU,oBAAI,IAAO;AAC3B,MAAI,OAAO;AAEX,QAAM,QAAO,CAAC,QAAQ;AAEtB,SAAO,MAAM,SAAS,GAAG;AAErB,UAAM,OAAO,MAAM,MAAM,SAAS,CAAC;AAEnC,QAAI,CAAC,QAAQ,IAAI,IAAI,GAAG;AACpB,cAAQ,IAAI,IAAI;AAChB;AACA,gBAAU,MAAM,IAAI;AAGpB,YAAM,WAAW,YAAY,IAAI;AAGjC,eAAS,SAAS,UAAU;AACxB,YAAI,CAAC,QAAQ,IAAI,KAAK,GAAG;AACrB,gBAAM,KAAK,KAAK;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ,OAAO;AAEH,YAAM,IAAI;AACV;AACA,eAAS,MAAM,IAAI;AAAA,IACvB;AAAA,EACJ;AACJ;",
  "names": []
}
